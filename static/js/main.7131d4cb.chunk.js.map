{"version":3,"sources":["Card.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","Grid","item","md","xs","sm","Card","CardHeader","className","subheader","date","CardContent","Typography","variant","color","component","temp","minTemp","maxTemp","pressure","humidity","windSpeed","description","NavBar","AppBar","position","Toolbar","Link","href","underline","axios","require","App","state","city","data","getCityName","event","setState","target","value","handelSubmit","preventDefault","x","get","then","res","list","console","log","catch","err","message","this","length","l","blocks","i","push","key","dt_txt","main","temp_max","temp_min","wind","speed","weather","Nav","container","spacing","errorCrd","style","paddingTop","title","autoComplete","onSubmit","required","type","id","label","size","onChange","Button","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wRA6DeA,EArDD,SAACC,GACX,OAEQ,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,IAC1B,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,UAAU,OACnBC,UAAWT,EAAMU,OAErB,kBAACC,EAAA,EAAD,KAEI,kBAAEC,EAAA,EAAF,CAAaC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,UACvE,sDACCR,EAAMgB,KAFX,SAKA,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,YACtE,sDACCR,EAAMiB,QAFX,SAKA,kBAACL,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,YACtE,sDACCR,EAAMkB,QAFX,SAKA,kBAACN,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,YACtE,4CACCR,EAAMmB,SAFX,OAKA,kBAACP,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,YACtE,4CACCR,EAAMoB,SAFX,KAKA,kBAACR,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,cACtE,8CACCR,EAAMqB,UAFX,SAKA,kBAACT,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBC,UAAU,IAAIP,UAAU,QACtE,qDACCR,EAAMsB,iB,4CCvBpBC,EApBA,WACX,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,SACb,kBAACC,EAAA,EAAD,CAASb,QAAQ,SACb,kBAAC,IAAD,MAEA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAC3B,kBAACa,EAAA,EAAD,CAAMb,MAAM,UAAUc,KAAK,IAAIC,UAAU,QAAzC,SAGJ,0BAAMrB,UAAU,YACZ,kBAACI,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,WAA/B,iCCNdgB,EAAQC,EAAQ,IAwFPC,E,2MApFbC,MAAQ,CACNC,KAAM,cACNC,KAAM,I,EAIRC,YAAc,SAACC,GACb,EAAKC,SAAS,CACZJ,KAAMG,EAAME,OAAOC,S,EAIvBC,aAAe,SAACJ,GACdA,EAAMK,iBACN,IAAIC,EAAI,EAAKV,MAAMC,KACnBJ,EAAMc,IAAN,6DAAgED,EAAhE,4DACGE,MAAK,SAACC,GACL,EAAKR,SAAS,CACZH,KAAMW,EAAIX,KAAKY,OAEjBC,QAAQC,IAAI,EAAKhB,MAAME,SAExBe,OAAM,SAACC,GACNH,QAAQC,IAAIE,EAAIC,SAChB,EAAKd,SAAS,CACZH,MAAO,Q,wEAMb,GAAIkB,KAAKpB,MAAME,KAAKmB,OAAS,EAAG,CAG9B,IAFA,IAAIC,EAAIF,KAAKpB,MAAME,KAAKmB,OACpBE,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAGE,IACrBD,EAAOE,KAAK,kBAAC,EAAD,CAAOlD,UAAU,OAAOmD,IAAKF,EAAG/C,KAAM2C,KAAKpB,MAAME,KAAKsB,GAAGG,OACnE5C,KAAMqC,KAAKpB,MAAME,KAAKsB,GAAGI,KAAK7C,KAC9BE,QAASmC,KAAKpB,MAAME,KAAKsB,GAAGI,KAAKC,SACjC7C,QAASoC,KAAKpB,MAAME,KAAKsB,GAAGI,KAAKE,SACjC5C,SAAUkC,KAAKpB,MAAME,KAAKsB,GAAGI,KAAK1C,SAClCC,SAAUiC,KAAKpB,MAAME,KAAKsB,GAAGI,KAAKzC,SAClCC,UAAWgC,KAAKpB,MAAME,KAAKsB,GAAGO,KAAKC,MACnC3C,YAAa+B,KAAKpB,MAAME,KAAKsB,GAAGS,QAAQ,GAAG5C,eAE/C,OACE,6BACE,kBAAC6C,EAAD,MACA,kBAAClE,EAAA,EAAD,CAAMmE,WAAS,EAACC,QAAS,GAAzB,IAA8Bb,IAI/B,IAAyB,IAArBH,KAAKpB,MAAME,KAAa,CAC/B,IAAMmC,EACJ,kBAAChE,EAAA,EAAD,CAAME,UAAU,UAAU+D,MAAO,CAAEC,WAAY,SAC7C,kBAACjE,EAAA,EAAD,CAAYkE,MAAM,yCAItB,OACE,6BACE,kBAACN,EAAD,MACA,kBAAClE,EAAA,EAAD,SAAQqE,IAMd,OAEE,yBAAK9D,UAAU,OACb,kBAAC2D,EAAD,MACA,kBAAC,gBAAD,CAAeO,aAAa,MAAMC,SAAUtB,KAAKZ,cAC/C,kBAAC,gBAAD,CAAemC,UAAQ,EAACC,KAAK,OAAOrE,UAAU,OAAOsE,GAAG,WAAWC,MAAM,kBAAkBlE,QAAQ,WAAWmE,KAAK,QAAQlE,MAAM,UAAU0B,MAAOa,KAAKpB,MAAMC,KAAM+C,SAAU5B,KAAKjB,cAClL,6BAAM,6BACN,kBAAC8C,EAAA,EAAD,CAAQrE,QAAQ,WAAWC,MAAM,UAAU+D,KAAK,UAAhD,WAEF,6BAAM,6BAAM,kC,GA9EFM,aCFZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT9C,MAAK,SAAAmD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjE,QACf4D,UAAUC,cAAcO,YAI1BrD,QAAQC,IACN,iHAKE2C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBhD,QAAQC,IAAI,sCAGR2C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5B9C,OAAM,SAAAsD,GACLxD,QAAQwD,MAAM,4CAA6CA,M,OC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,kBAAwBxB,OAAOC,SAAS3D,MACpDmF,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,kBAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtCqB,MAAMtB,EAAO,CACXuB,QAAS,CAAE,iBAAkB,YAE5BrE,MAAK,SAAAsE,GAEJ,IAAMC,EAAcD,EAASD,QAAQtE,IAAI,gBAEnB,MAApBuE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzB,UAAUC,cAAcyB,MAAM1E,MAAK,SAAAmD,GACjCA,EAAawB,aAAa3E,MAAK,WAC7ByC,OAAOC,SAASkC,eAKpB/B,EAAgBC,EAAOC,MAG1B1C,OAAM,WACLF,QAAQC,IACN,oEAvFAyE,CAAwB/B,EAAOC,GAI/BC,UAAUC,cAAcyB,MAAM1E,MAAK,WACjCG,QAAQC,IACN,iHAMJyC,EAAgBC,EAAOC,OCvC/BE,I","file":"static/js/main.7131d4cb.chunk.js","sourcesContent":["import React from 'react';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid } from '@material-ui/core';\n\n\nconst Cards = (props) => {\n    return (\n       \n            <Grid item md={3} xs={12} sm={12}>\n                <Card >\n                    <CardHeader  className=\"date\"\n                        subheader={props.date}\n                    />\n                    <CardContent>\n\n                        < Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"detail\">\n                            <span>Current Temprature: </span>\n                            {props.temp}°C\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"min_temp\">\n                            <span>Minimum Temprature: </span>\n                            {props.minTemp}°C\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"max_temp\">\n                            <span>Maximum Temprature: </span>\n                            {props.maxTemp}°C\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"pressure\">\n                            <span>Pressure: </span>\n                            {props.pressure} Pa\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"humidity\">\n                            <span>Humidity: </span>\n                            {props.humidity}%\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"wind_speed\">\n                            <span>Wind Speed: </span>\n                            {props.windSpeed}Knots\n                        </Typography>\n\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" className=\"desc\">\n                            <span>Day's Description: </span>\n                            {props.description}\n                        </Typography>\n                    </CardContent>\n                </Card>\n            </Grid>\n        \n\n    )\n}\n\n\nexport default Cards;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport HomeIcon from '@material-ui/icons/Home';\nimport Link from '@material-ui/core/Link';\n\nconst NavBar = () => {\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar variant=\"dense\">\n                <HomeIcon />\n\n                <Typography variant=\"h5\" color=\"inherit\">\n                    <Link color=\"inherit\" href=\"/\" underline=\"none\">Home</Link>\n                </Typography>\n\n                <span className=\"navRight\">\n                    <Typography variant=\"h5\" color=\"inherit\">\n                        React Weather Application\n                    </Typography>\n                </span>\n            </Toolbar>\n        </AppBar>\n\n    );\n}\nexport default NavBar;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport Cards from './Card'\nimport { Grid } from '@material-ui/core';\nimport NavBar from './Nav'\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\n// import Link from '@material-ui/core/Link';\n\n\nconst axios = require('axios');\n\nclass App extends Component {\n\n  state = {\n    city: 'Bhubaneswar',\n    data: []\n\n  }\n\n  getCityName = (event) => {\n    this.setState({\n      city: event.target.value\n    })\n  }\n\n  handelSubmit = (event) => {\n    event.preventDefault();\n    let x = this.state.city;\n    axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${x},in&appid=a54b92c2f23341e4db393f6badcf3d0c&units=metric`)\n      .then((res) => {\n        this.setState({\n          data: res.data.list\n        })\n        console.log(this.state.data)\n      })\n      .catch((err) => {\n        console.log(err.message);\n        this.setState({\n          data: -1\n        })\n      });\n  }\n\n  render() {\n    if (this.state.data.length > 0) {\n      let l = this.state.data.length\n      let blocks = [];\n      for (let i = 0; i < l; i++) {\n        blocks.push(<Cards className=\"card\" key={i} date={this.state.data[i].dt_txt}\n          temp={this.state.data[i].main.temp}\n          maxTemp={this.state.data[i].main.temp_max}\n          minTemp={this.state.data[i].main.temp_min}\n          pressure={this.state.data[i].main.pressure}\n          humidity={this.state.data[i].main.humidity}\n          windSpeed={this.state.data[i].wind.speed}\n          description={this.state.data[i].weather[0].description} />)\n      }\n      return (\n        <div>\n          <NavBar />\n          <Grid container spacing={2}> {blocks}</Grid>\n        </div>\n      );\n    }\n    else if (this.state.data === -1) {\n      const errorCrd =\n        <Card className=\"errCard\" style={{ paddingTop: \"90px\" }}>\n          <CardHeader title=\"Wrong City Name. City not found ...\" ></CardHeader>\n        </Card>\n\n\n      return (\n        <div>\n          <NavBar />\n          <Grid> {errorCrd}</Grid>\n        </div>\n\n      );\n    }\n\n    return (\n\n      <div className=\"App\" >\n        <NavBar />\n        <ValidatorForm autoComplete=\"off\" onSubmit={this.handelSubmit} >\n          <TextValidator required type=\"text\" className=\"city\" id=\"cityName\" label=\"Enter City Name\" variant=\"outlined\" size=\"small\" color=\"primary\" value={this.state.city} onChange={this.getCityName} />\n          <br /><br />\n          <Button variant=\"outlined\" color=\"primary\" type=\"submit\">Search</Button>\n        </ValidatorForm>\n        <br /><br /><br />\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}